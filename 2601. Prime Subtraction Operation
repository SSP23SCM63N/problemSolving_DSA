// Final Optimized Approach : 
class Solution {
    public boolean primeSubOperation(int[] nums) {
        for (int i = 0; i < nums.length; i++) {
            int maxSubtractionLimit;
            if (i == 0) {
                maxSubtractionLimit = nums[0];
            } else {
                maxSubtractionLimit = nums[i] - nums[i - 1];
            }

            if (maxSubtractionLimit <= 0) {
                return false;
            }

            int largestPrime = 0;
            for (int primeCandidate = maxSubtractionLimit - 1; primeCandidate >= 2; primeCandidate--) {
                if (isPrime(primeCandidate)) {
                    largestPrime = primeCandidate;
                    break;
                }
            }

            nums[i] -= largestPrime;
        }
        return true;
    }

    private boolean isPrime(int num) {
        for (int i = 2; i <= Math.sqrt(num); i++) {
            if (num % i == 0) {
                return false;
            }
        }
        return true;
    }
}

// Initial Brute Force Approach : 
// class Solution {
//     public boolean primeSubOperation(int[] nums) {
//         for(int i = 0 ; i < nums.length-1 ; i++){
//             int numberToSub = nums[i]-1;
//             while(numberToSub>1){
//                 if(isPrime(numberToSub)){
//                     if(i==0){
//                         nums[i]-=numberToSub;
//                         break;
//                     }
//                     else if(isLeast(nums[i-1],nums[i],numberToSub,nums[i+1])){
//                         nums[i]-=numberToSub;
//                         break;
//                     }
//                 }
//                 numberToSub--;
//             }
//         }
//         return isSorted(nums);
//     }

//     public static boolean isSorted(int[] nums){
//         for(int i = 1 ; i < nums.length ; i++){
//             if(nums[i]<=nums[i-1]) return false;
//         }
//         return true;
//     }

//     public static boolean isLeast(int before, int number, int prime, int after){
//         int least = number-prime;
//         if(least>before && after>least){
//             return true;
//         }else{
//             return false;
//         }
//     }

//      public boolean isPrime(int x) {
//         for (int i = 2; i <= Math.sqrt(x); i++) {
//             if (x % i == 0) {
//                 return false;
//             }
//         }
//         return true;
//     }
// }
